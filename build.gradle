allprojects {
    apply plugin: 'java'
    apply plugin: 'idea'

    version = '1.0.0-SNAPSHOT'
    group = 'com.zenika.dorm'

    sourceCompatibility = '1.6'
    targetCompatibility = '1.6'

    ideaModule {
        beforeConfigured { module ->
            module.dependencies.clear()
        }
    }

    configurations {
        sharedTests
        // commons-logging artefacts are useless (using SLF4J and Logback)
        all*.exclude group: 'commons-logging'
        all*.exclude group: 'log4j'
    }

    task testJar(type: Jar, dependsOn: testClasses) {
        baseName = "test-${project.archivesBaseName}"
        from sourceSets.test.classes
    }

    artifacts {
        sharedTests testJar
    }

    test.enabled = false;
}

ideaProject {
    // Setting Java version to use in IDEA
    javaVersion = "1.6"
    // Setting GIT as VCS
    withXml { provider ->
        def node = provider.asNode()
        def vcsConfig = node.component.find { it.'@name' == 'VcsDirectoryMappings' }
        vcsConfig.mapping[0].'@vcs' = 'Git'
    }
}

// Trying to get a kind of Maven's dependencyManagement
// 1st step, introducing general properties
versions = [
        slf4j: '1.6.1',
        logback: '0.9.29',

        commons_lang3: '3.0.1',
        commons_io: '2.0.1',
        commons_beanutils: '1.8.3',
        commons_collections: '3.2.1',
        commons_httpcore: '4.1.2',
        commons_httpclient: '4.1.2',
        commons_dbUtils: '1.3',
        commons_codec: '1.5',
        guava: '10.0',

        servlet_api: '2.5',
        jersey: '1.8',
        jackson: '1.8.4',
        ivy: '2.2.0',
        guiceberry: '3.0.4',
        jukito: '1.1',
        guice: '3.0',
        junit: '4.8.2',
        fest_assert: '1.4',
        mockito: '1.8.5',
        morphia: '0.99',
        tomcat: '7.0.19',
        postgresql: '9.0-801.jdbc4',
        jackson_mapper: '1.8.5',
        opencsv: '2.3',

        jgit: '1.1.0.201109151100-r'
]

// 2nd step, introducing libraries
libraries = [
        slf4j_api: 'org.slf4j:slf4j-api:' + versions.slf4j,
        slf4j_jcl: 'org.slf4j:jcl-over-slf4j:' + versions.slf4j,
        slf4j_jul: 'org.slf4j:jul-to-slf4j:' + versions.slf4j,
        slf4j_log4j: 'org.slf4j:log4j-over-slf4j:' + versions.slf4j,
        logback_core: 'ch.qos.logback:logback-core:' + versions.logback,
        logback_classic: 'ch.qos.logback:logback-classic:' + versions.logback,

        commons_lang3: 'org.apache.commons:commons-lang3:' + versions.commons_lang3,
        commons_io: 'commons-io:commons-io:' + versions.commons_io,
        commons_beanutils: 'commons-beanutils:commons-beanutils:' + versions.commons_beanutils,
        commons_collections: 'commons-collections:commons-collections:' + versions.commons_collections,
        commons_httpcore: 'org.apache.httpcomponents:httpcore:' + versions.commons_httpcore,
        commons_httpclient: 'org.apache.httpcomponents:httpclient:' + versions.commons_httpclient,
        commons_dbUtils: 'commons-dbutils:commons-dbutils:' + versions.commons_dbUtils,
        commons_codec: 'commons-codec:commons-codec:' + versions.commons_codec,
        guava: 'com.google.guava:guava:' + versions.guava,

        servlet_api: 'javax.servlet:servlet-api:' + versions.servlet_api,

        jersey_server: 'com.sun.jersey:jersey-server:' + versions.jersey,
        jersey_json: 'com.sun.jersey:jersey-json:' + versions.jersey,
        jersey_client: 'com.sun.jersey:jersey-client:' + versions.jersey,
        jersey_multipart: 'com.sun.jersey.contribs:jersey-multipart:' + versions.jersey,
        jersey_guice: 'com.sun.jersey.contribs:jersey-guice:' + versions.jersey,
        jackson_mrbean: 'org.codehaus.jackson:jackson-mrbean:' + versions.jackson,
        jackson_mapper: 'org.codehaus.jackson:jackson-mapper-lgpl:' + versions.jackson_mapper,

        guice: 'com.google.inject:guice:' + versions.guice,
        guice_assistedinject: 'com.google.inject.extensions:guice-assistedinject:' + versions.guice,
        guice_multibindings: 'com.google.inject.extensions:guice-multibindings:' + versions.guice,
        guice_jndi: 'com.google.inject.extensions:guice-jndi:' + versions.guice,

        ivy: 'org.apache.ivy:ivy:' + versions.ivy,
        junit: 'junit:junit:' + versions.junit,
        mockito: 'org.mockito:mockito-all:' + versions.mockito,
        guiceberry: 'com.google.guiceberry:guiceberry:' + versions.guiceberry,
        jukito: 'org.jukito:jukito:' + versions.jukito,
        fest_assert: 'org.easytesting:fest-assert:' + versions.fest_assert,

        tomcat_embeded_core: 'org.apache.tomcat.embed:tomcat-embed-core:' + versions.tomcat,
        tomcat_embeded_juli: 'org.apache.tomcat.embed:tomcat-embed-logging-juli:' + versions.tomcat,

        postgresql: 'postgresql:postgresql:' + versions.postgresql,

        opencsv: 'net.sf.opencsv:opencsv:' + versions.opencsv,

        jgit: 'org.eclipse.jgit:org.eclipse.jgit:' + versions.jgit
]

subprojects {

    configurations.compile.transitive = true

    repositories {
        mavenCentral()
        mavenRepo name: 'java.net repository', urls: "http://download.java.net/maven/2"
        mavenRepo name: 'tinkerpop', urls: 'http://tinkerpop.com/maven2'
        mavenRepo name: 'jgit', urls: 'http://download.eclipse.org/jgit/maven'
    }

    dependencies {

        // commons
        compile libraries.commons_lang3
        compile libraries.commons_io
        compile libraries.commons_beanutils
        compile libraries.commons_collections
        compile libraries.commons_codec
        compile libraries.guava

        // logging
        compile libraries.slf4j_api
        compile libraries.slf4j_jcl
        compile libraries.slf4j_jul
        compile libraries.slf4j_log4j
        compile libraries.logback_core
        compile libraries.logback_classic

        // common test libraries
        testCompile libraries.junit
        testCompile libraries.mockito
        testCompile libraries.fest_assert
    }

}
